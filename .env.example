# getty – Example environment variables

########################################
# Core
########################################

# Environment: 'production' in hosting, 'development' locally
NODE_ENV=production

# Server port (default 3000)
# PORT=3000

# Secure cookies in production (HTTPS). Use 0 locally.
COOKIE_SECURE=0

# Session TTL (in seconds). Default: 3 days
SESSION_TTL_SECONDS=259200

## ------------------------------------------------------------
## Session / Namespaces
## ------------------------------------------------------------
# Force session requirement even without Redis (0 = allow anonymous local writes)
# GETTY_REQUIRE_SESSION=1

# Require admin namespace for write (protects config POSTs). Automatically true when Redis present.
# GETTY_REQUIRE_ADMIN_WRITE=1

# Strict local admin: when 1, only loopback (127.0.0.1 / ::1) is auto-trusted for unmasked fields.
# Set to 0 to simulate “untrusted” access locally and see masking behavior.
# GETTY_STRICT_LOCAL_ADMIN=1

# Optional Redis for true multi-tenant namespaced sessions (recommended in hosted)
# Enables token regeneration, revocation scopes, per-namespace isolation.
# REDIS_URL=redis://user:pass@host:6379/0

# Trusted IPs that see full data (comma-separated). Overridden by GETTY_STRICT_LOCAL_ADMIN=1.
# GETTY_ALLOW_IPS=127.0.0.1,::1

# Logging & audit
# GETTY_LOG_LEVEL=info        # info | debug | warn | error | silent
# GETTY_LOG_FORMAT=plain       # (optional) custom format strategy
# Enable append-only audit of sensitive write actions (creates audit log file)
# GETTY_ENABLE_AUDIT=1

## Security layers (all optional; enable in hosted)
# CSRF protection (fetch token via GET /api/admin/csrf, then send header x-csrf-token on unsafe requests)
# (Override header name with GETTY_CSRF_HEADER). Old docs mentioned /api/csrf; correct path is /api/admin/csrf.
# GETTY_ENABLE_CSRF=1
# Admin write rate limiting layer (independent of generic limiter)
# GETTY_ENABLE_ADMIN_RL=1
# Allowlist of origins permitted for potentially unsafe writes / embed contexts
# GETTY_ALLOWED_ORIGINS=https://youradmin.example,https://widgets.example

########################################
# Content-Security-Policy (CSP)
########################################

# CSP is enabled by default in production (NODE_ENV=production).
# To explicitly force enable/disable:
#   GETTY_ENABLE_CSP=1  -> force ON
#   GETTY_ENABLE_CSP=0  -> force OFF

# Extra directives (comma-separated lists)
# GETTY_CSP_CONNECT_EXTRA=https://sockety.odysee.tv
# GETTY_CSP_SCRIPT_EXTRA=https://cdn.example.com
# GETTY_CSP_IMG_EXTRA=https://cdn.example.com
# GETTY_CSP_MEDIA_EXTRA=https://cdn.audio.com

# Allow inline event handlers only by hash (advanced; prefer removing inline handlers)
# Adds 'unsafe-hashes' to script-src when set to 1
# GETTY_CSP_UNSAFE_HASHES=0

# Comma-separated list of allowed script hashes for inline handlers (NO quotes)
# Example: sha256-xxxxxxxx,sha256-yyyyyyyy
# GETTY_CSP_SCRIPT_HASHES=

# Optional override for script-src-attr directive (comma-separated; NO quotes)
# Useful values: 'unsafe-hashes' and/or specific hashes (e.g., sha256-...)
# Example: GETTY_CSP_SCRIPT_ATTR=unsafe-hashes, sha256-xxxxxxxx
# GETTY_CSP_SCRIPT_ATTR=

#################################################
# WebSocket: Origin allowlist (optional, prod)
#################################################

# If you set this list (comma-separated), only those Origins may open WS.
# OBS usually doesn't send Origin (empty is allowed for compatibility).
# GETTY_ALLOW_ORIGINS=https://yourdomain.com,https://admin.yourdomain.com

########################################
# Liveviews proxy (Odysee status)
########################################

# Cache TTL (ms) for live status proxy (default 10000)
# GETTY_LIVEVIEWS_TTL_MS=10000

# Optional rate limiting for the proxy (disabled by default)
# GETTY_LIVEVIEWS_RL_ENABLED=1
# GETTY_LIVEVIEWS_RL_WINDOW_MS=60000
# GETTY_LIVEVIEWS_RL_MAX=120

########################################
# External notifications (optional)
########################################

# DISCORD_WEBHOOK=https://discord.com/api/webhooks/...
# TELEGRAM_BOT_TOKEN=123456:abc...
# TELEGRAM_CHAT_ID=123456789

########################################
# Chat (Odysee WebSocket)
########################################

# Template used to build the Odysee WS URL; ODYSEE_WS_URL can override
# ODYSEE_WS_TEMPLATE=wss://sockety.odysee.tv/socket?name={channel}

# Direct WS URL (overrides template if set)
# ODYSEE_WS_URL=wss://sockety.odysee.tv/socket?name=YourChannel

########################################
# Widgets: Arweave queries and timeouts
########################################

# Logging
# LOG_LEVEL=debug

# Tip Widget
# TIP_WIDGET_EXTRA_GATEWAYS=https://arweave.net,https://ar-io.net
# TIP_WIDGET_GRAPHQL_TIMEOUT_MS=10000

# Tip Goal
# TIP_GOAL_EXTRA_GATEWAYS=https://arweave.net,https://ar-io.net
# TIP_GOAL_GRAPHQL_TIMEOUT_MS=10000

# Last Tip
# LAST_TIP_EXTRA_GATEWAYS=https://arweave.net,https://ar-io.net
# LAST_TIP_GRAPHQL_TIMEOUT_MS=10000
# LAST_TIP_VIEWBLOCK_TIMEOUT_MS=6000

# Viewblock API (optional, for enhanced lookups)
# VIEWBLOCK_API_KEY=your_key_here

########################################
# Social media embeds (security)
########################################

# Enforce HTTPS-only embeds for social media (true in production by default)
# SOCIALMEDIA_HTTPS_ONLY=true

########################################
# Stream history / analytics
########################################
# You normally don't need env vars; persisted via config API. Provided here for reference only.
# (ClaimID se guarda en config/stream-history-config.json o Redis namespace.)

########################################
# Token & session operations (reference)
########################################
# 1. POST /api/session/new            -> creates new admin/public tokens (when none or to rotate all)
# 2. POST /api/session/regenerate-public -> rotates only public token
# 3. POST /api/session/revoke         -> revoke=public|all (JSON body)
# 4. GET  /api/session/status         -> session support/health
# 5. GET  /api/session/public-token   -> recover public token if lost (admin session required)

########################################
# Export / Import bundle
########################################
# Use admin UI or endpoints:
#   GET  /api/export/config-bundle
#   POST /api/import/config-bundle  (body: JSON from previous export)
# Includes: chat, tts, lastTip, tipGoal, socialmedia, external notifications, liveviews,
# announcement, stream history (claimid) and raffle settings.

########################################
# Masking behavior
########################################
# Fields considered sensitive may be masked when request is not trusted (depends on
# GETTY_STRICT_LOCAL_ADMIN, session presence, and origin). Adjust flags above to test.

########################################
# Internationalization
########################################
# Auto-detects language from browser; no env needed. Add more locales in shared-i18n/.

########################################
# Recommended minimal hosted config (example)
########################################
# NODE_ENV=production
# COOKIE_SECURE=1
# REDIS_URL=redis://redis:6379/0
# GETTY_REQUIRE_SESSION=1
# GETTY_REQUIRE_ADMIN_WRITE=1
# GETTY_ENABLE_CSP=1
# GETTY_STRICT_LOCAL_ADMIN=1
# GETTY_ENABLE_CSRF=1
# GETTY_ENABLE_ADMIN_RL=1
# GETTY_ENABLE_AUDIT=1

########################################
# Local quickstart (no Redis, simpler)
########################################
# NODE_ENV=development
# COOKIE_SECURE=0
# (leave GETTY_REQUIRE_SESSION commented)
# GETTY_STRICT_LOCAL_ADMIN=1
# GETTY_LOG_LEVEL=debug
